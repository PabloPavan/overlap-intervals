#+TITLE: Overlap Intervals
#+AUTHOR: Pablo Pavan
#+LATEX_HEADER: \usepackage[margin=2cm,a4paper]{geometry}
#+TAGS: Pablo(P) noexport(n) deprecated(d) success(s) failed(f) pending(p)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+SEQ_TODO: TODO(t!) STARTED(s!) WAITING(w!) REVIEW(r!) PENDING(p!) ON-HOLD(o!) | DONE(d!) CANCELLED(c!) DEFERRED(f!) DEPRECATED(x!)
#+STARTUP: overview indent
#+OPTIONS: ^:nil
#+OPTIONS: _:nil
#+PROPERTY: header-args :eval never-export

* Input data

#+begin_src R :results output :session *R* :exports both
df <- as.data.frame(read.csv('data/intervals.small.csv', dec = '.', sep = ';'))

epoch_time <- 1325376000
df$start  = df$start * 1000000
df$start_time = df$start_time - epoch_time
df$start_time = df$start_time * 1000000

df$end  = df$end * 1000000
df$end_time = df$end_time - epoch_time
df$end_time = df$end_time * 1000000

df$start_ = (df$start_time + df$start)
df$duration <- df$end - df$start
df$end_ = df$start_ + df$duration

str(df)
#+end_src

#+RESULTS:
#+begin_example
'data.frame':	19 obs. of  9 variables:
 $ filename  : Factor w/ 3 levels "1171446687421322104.parsed.json",..: 1 1 2 2 3 3 3 3 3 3 ...
 $ start_time: num  2.58e+11 2.58e+11 2.59e+11 2.59e+11 2.53e+11 ...
 $ end_time  : num  2.59e+11 2.59e+11 2.62e+11 2.62e+11 2.58e+11 ...
 $ start     : num  2.39e+06 6.97e+08 2.77e+06 3.52e+09 4.56e+05 ...
 $ end       : num  4.99e+07 7.47e+08 3.72e+07 3.58e+09 1.89e+06 ...
 $ info      : Factor w/ 3 levels "posix read shared file",..: 2 3 2 3 2 2 1 2 2 3 ...
 $ start_    : num  2.58e+11 2.58e+11 2.59e+11 2.62e+11 2.53e+11 ...
 $ duration  : num  47466010 50885958 34444802 58400352 1435591 ...
 $ end_      : num  2.58e+11 2.59e+11 2.59e+11 2.62e+11 2.53e+11 ...
#+end_example


#+begin_src R :results output graphics :file data/intervals.png :exports both :width 1000 :height 400 :session *R* 
library(ggplot2)
library(cowplot)
df$id <- seq.int(nrow(df))

ggplot(df, aes(x = start_, y = start_+duration, fill=info)) + 
     geom_rect(aes(xmin = start_, xmax = start_+duration, ymin = id, ymax = id + 1)) +
     ylim(0, max(df$id+1)) +
     xlab("Time (microseconds)") +
     ylab("Interval ID") + 
     theme_bw() +
     theme(
           legend.position = "top",
           text = element_text(size = 14),
           axis.title.y = element_text(vjust = 0.4), 
           strip.background = element_rect(colour = NA, fill = NA)
     )
#+end_src

#+RESULTS:
[[file:data/intervals.png]]

* Output data


 #+begin_src R :results output :session *R* :exports both
df <- as.data.frame(read.csv('data/final.csv', dec = '.', sep = ';'))

str(df)
 #+end_src

 #+RESULTS:
 #+begin_example
 'data.frame':	37 obs. of  9 variables:
  $ start   : num  2.53e+11 2.53e+11 2.53e+11 2.53e+11 2.53e+11 ...
  $ end     : num  2.53e+11 2.53e+11 2.53e+11 2.53e+11 2.53e+11 ...
  $ duration: num  179945 1569 136243 875207 18909 ...
  $ phases  : Factor w/ 5 levels "-1","0","0,1",..: 2 2 2 4 2 2 2 2 2 3 ...
  $ nphases : int  1 1 1 2 1 1 1 1 1 2 ...
  $ jobs    : Factor w/ 5 levels "-1","0","0,2",..: 5 5 5 5 5 5 5 5 5 5 ...
  $ njobs   : int  1 1 1 1 1 1 1 1 1 1 ...
  $ days    : int  1 1 1 1 1 1 1 1 1 1 ...
  $ ndays   : int  1 1 1 1 1 1 1 1 1 1 ...
#+end_example

 #+begin_src R :results output graphics :file data/final.png :exports both :width 1000 :height 250 :session *R* 
pal <- c(   "gray",
            "#d5c76d",
            "#d5936d",
            "#6dafd5",
            "#d56d7b",
            "#6dd5c7",
            "#936dd5",
            "#d56daf",
            "#db818d",
            "#959fe0",
            "#955fe0",
            "#950fe0")

ggplot(df, aes(x = start, y = start+duration, fill = as.factor(phases))) + 
    geom_rect(aes(xmin = start, xmax = start + duration, ymin = 0, ymax = 1)) +
    geom_vline(xintercept = min(df$start), linetype = 'dashed', size = 0.5) +
    geom_vline(xintercept = max(df$end), linetype = 'dashed') +
    scale_fill_manual(
       "I/O phases",
        values = pal
    ) +
    xlab("Tempo de execução (ms)") +
    ylim(0, 1) +
    guides(fill = guide_legend(ncol = 3)) +
    theme_bw() +
    theme(
        legend.position = "top",
        text = element_text(size = 14),
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank()
    )
 #+end_src

 #+RESULTS:
 [[file:data/final.png]]

