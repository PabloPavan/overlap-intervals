#+TITLE: Overlap Analysis
#+AUTHOR: Pablo Pavan
#+LATEX_HEADER: \usepackage[margin=2cm,a4paper]{geometry}
#+TAGS: Pablo(P) noexport(n) deprecated(d) success(s) failed(f) pending(p)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+SEQ_TODO: TODO(t!) STARTED(s!) WAITING(w!) REVIEW(r!) PENDING(p!) ON-HOLD(o!) | DONE(d!) CANCELLED(c!) DEFERRED(f!) DEPRECATED(x!)
#+STARTUP: overview indent
#+OPTIONS: ^:nil
#+OPTIONS: _:nil
#+PROPERTY: header-args :eval never-export 

* Load R librarys

#+begin_src R :results output :session *R* :exports both
library(ggplot2)
library(cowplot)
#+end_src

#+RESULTS:
: 
: Attaching package: ‘cowplot’
: 
: The following object is masked from ‘package:ggplot2’:
: 
:     ggsave

* Analysis of raw data

** Read CSV

#+begin_src R :results output :session *R* :exports both
df <- as.data.frame(read.csv('../data/intervals.small.csv', dec = '.', sep = ';'))

str(df)
#+end_src

#+RESULTS:
#+begin_example
'data.frame':	5 obs. of  16 variables:
 $ filename       : Factor w/ 2 levels "11.parsed.json",..: 1 1 1 2 2
 $ jobid          : int  45 45 45 13 45
 $ uid            : int  41 41 41 41 41
 $ runtime        : int  748 220 500 3578 1000
 $ start_time     : int  3761 3761 3761 3777 3777
 $ end_time       : int  4508 4508 4508 8354 8354
 $ exec           : int  21 21 21 15 21
 $ file           : num  1.7 1.5 1.5 1 1.5
 $ interval.id    : int  1 2 2 1 2
 $ start          : num  2.3 696.5 696.5 2.7 120
 $ end            : num  49.8 747.4 747.4 37.2 747.4
 $ info           : Factor w/ 5 levels "posix read consecutive sequential unique file",..: 2 3 1 5 4
 $ X1_access_count: int  4 4 4 4 4
 $ X1_access_size : int  4 4 4 4 4
 $ read_bytes     : int  14 0 0 20 0
 $ write_bytes    : int  0 14 14 0 14
#+end_example

** Pre-processig

#+begin_src R :results output :session *R* :exports both
epoch_time <- 0
df$start  = df$start * 1000000
df$start_time = df$start_time - epoch_time
df$start_time = df$start_time * 1000000
# df$final_start_time = df$start_time + df$start

df$end  = df$end * 1000000
df$end_time = df$end_time - epoch_time
df$end_time = df$end_time * 1000000
# df$final_end_time = df$end_time + df$end



df$start_ = (df$start_time + df$start)# -epoch_time


df$duration <- df$end - df$start


df$end_ = df$start_ + df$duration #- epoch_time




str(df)
#+end_src

#+RESULTS:
#+begin_example
'data.frame':	5 obs. of  19 variables:
 $ filename       : Factor w/ 2 levels "11.parsed.json",..: 1 1 1 2 2
 $ jobid          : int  45 45 45 13 45
 $ uid            : int  41 41 41 41 41
 $ runtime        : int  748 220 500 3578 1000
 $ start_time     : num  3.76e+09 3.76e+09 3.76e+09 3.78e+09 3.78e+09
 $ end_time       : num  4.51e+09 4.51e+09 4.51e+09 8.35e+09 8.35e+09
 $ exec           : int  21 21 21 15 21
 $ file           : num  1.7 1.5 1.5 1 1.5
 $ interval.id    : int  1 2 2 1 2
 $ start          : num  2.30e+06 6.96e+08 6.96e+08 2.70e+06 1.20e+08
 $ end            : num  4.98e+07 7.47e+08 7.47e+08 3.72e+07 7.47e+08
 $ info           : Factor w/ 5 levels "posix read consecutive sequential unique file",..: 2 3 1 5 4
 $ X1_access_count: int  4 4 4 4 4
 $ X1_access_size : int  4 4 4 4 4
 $ read_bytes     : int  14 0 0 20 0
 $ write_bytes    : int  0 14 14 0 14
 $ start_         : num  3.76e+09 4.46e+09 4.46e+09 3.78e+09 3.90e+09
 $ duration       : num  4.75e+07 5.09e+07 5.09e+07 3.45e+07 6.27e+08
 $ end_           : num  3.81e+09 4.51e+09 4.51e+09 3.81e+09 4.52e+09
#+end_example


** Plot raw 

#+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 250 :session *R* 

df$id <- seq.int(nrow(df))

ggplot(df, aes(x = start_, y = start_+duration, fill=info)) + 
     geom_rect(aes(xmin = start_, xmax = start_+duration, ymin = id, ymax = id + 1)) +
     #geom_vline(xintercept = 0, color = "red") +
     #geom_vline(xintercept = 4*1000000000, color = "red") +
     ylim(0, max(df$id+1)) +
     
     xlab("Time (milliseconds)") +
     ylab("Interval ID") + 
     theme_bw() +
     theme(
           legend.position = "none",
           text = element_text(size = 14),
           axis.title.y = element_text(vjust = 0.4), 
           strip.background = element_rect(colour = NA, fill = NA)
     )
#+end_src

#+RESULTS:
[[file:/tmp/babel-10116WJ4/figure101166Nr.png]]

* Analysis of C++ results
** Read CSV

 #+begin_src R :results output :session *R* :exports both
df <- as.data.frame(read.csv('../data/final.csv', dec = '.', sep = ';'))

str(df)
 #+end_src

 #+RESULTS:
 : 'data.frame':	4 obs. of  7 variables:
 :  $ start   : num  3.76e+09 4.46e+09 4.78e+09 4.90e+09
 :  $ end     : num  3.81e+09 4.51e+09 4.81e+09 5.52e+09
 :  $ duration: int  47500000 50900000 34500000 627400000
 :  $ phases  : Factor w/ 4 levels "0","1,2","3",..: 1 2 3 4
 :  $ nphases : int  1 2 1 1
 :  $ jobs    : int  0 0 1 1
 :  $ njobs   : int  1 1 1 1

** Plot intevals

 #+begin_src R :results output graphics :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 250 :session *R* 
ggplot(df, aes(x = start, y = start+duration, fill = phases)) + 
    geom_rect(aes(xmin = start, xmax = start + duration, ymin = 0, ymax = 1)) +
    geom_vline(xintercept = min(df$start), linetype = 'dashed', size = 0.5) +
    geom_vline(xintercept = max(df$end), linetype = 'dashed') +
    scale_fill_manual(
       "I/O phases",
        values = c(
            "#6d7bd5",
            "#d5c76d",
            "#d5936d",
            "#6dafd5",
            "#d56d7b",
            "#6dd5c7",
            "#936dd5",
            "#d56daf",
            "#db818d",
            "#959fe0"
        )
    ) +
    xlab("Tempo de execução (ms)") +
    ylim(0, 1) +
    guides(fill = guide_legend(ncol = 1)) +
    theme_bw() +
    theme(
        legend.position = "top",
        text = element_text(size = 14),
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank()
    )
 #+end_src

 #+RESULTS:
 [[file:/tmp/babel-10116WJ4/figure10116HYx.png]]
