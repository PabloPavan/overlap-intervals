#+TITLE: Overlap Analysis
#+AUTHOR: Pablo Pavan
#+LATEX_HEADER: \usepackage[margin=2cm,a4paper]{geometry}
#+TAGS: Pablo(P) noexport(n) deprecated(d) success(s) failed(f) pending(p)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+SEQ_TODO: TODO(t!) STARTED(s!) WAITING(w!) REVIEW(r!) PENDING(p!) ON-HOLD(o!) | DONE(d!) CANCELLED(c!) DEFERRED(f!) DEPRECATED(x!)
#+STARTUP: overview indent
#+OPTIONS: ^:nil
#+OPTIONS: _:nil
#+PROPERTY: header-args :eval never-export 


* Load R librarys

#+begin_src R :results output :session *R* :exports both
library(ggplot2)
library(cowplot)
library(dplyr)
#+end_src

#+RESULTS:
#+begin_example

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union
#+end_example

* Initial tests
** Analysis of raw data

- State "TODO"       from              [2019-08-02 sex 15:58]
*** Read CSV

#+begin_src R :results output :session *R* :exports both
df <- as.data.frame(read.csv('../data/intervals.small.csv', dec = '.', sep = ';'))

str(df)
#+end_src

#+RESULTS:
: 
: 'data.frame':	9 obs. of  6 variables:
:  $ filename  : Factor w/ 4 levels "11.parsed.json",..: 1 1 2 2 3 3 4 4 4
:  $ start_time: int  3761 3761 3761 3761 3761 3761 3761 3761 3761
:  $ end_time  : int  4508 4508 4508 4508 4508 4508 4508 4508 4508
:  $ start     : num  2.3 2.3 5 5 8 32 8 50 50
:  $ end       : num  49.8 49.8 40 40 30 45 30 55 53
:  $ info      : Factor w/ 6 levels "posix read file",..: 3 4 6 2 1 1 1 1 5

*** Pre-processig

#+begin_src R :results output :session *R* :exports both
epoch_time <- 0
df$start  = df$start * 1
df$start_time = df$start_time - epoch_time
df$start_time = df$start_time * 1
# df$final_start_time = df$start_time + df$start

df$end  = df$end * 1
df$end_time = df$end_time - epoch_time
df$end_time = df$end_time * 1
# df$final_end_time = df$end_time + df$end



df$start_ = (df$start_time + df$start)# -epoch_time


df$duration <- df$end - df$start


df$end_ = df$start_ + df$duration #- epoch_time




str(df)
#+end_src

#+RESULTS:
#+begin_example

'data.frame':	9 obs. of  9 variables:
 $ filename  : Factor w/ 4 levels "11.parsed.json",..: 1 1 2 2 3 3 4 4 4
 $ start_time: num  3761 3761 3761 3761 3761 ...
 $ end_time  : num  4508 4508 4508 4508 4508 ...
 $ start     : num  2.3 2.3 5 5 8 32 8 50 50
 $ end       : num  49.8 49.8 40 40 30 45 30 55 53
 $ info      : Factor w/ 6 levels "posix read file",..: 3 4 6 2 1 1 1 1 5
 $ start_    : num  3763 3763 3766 3766 3769 ...
 $ duration  : num  47.5 47.5 35 35 22 13 22 5 3
 $ end_      : num  3811 3811 3801 3801 3791 ...
#+end_example


*** Plot raw 

#+begin_src R :results output graphics :file interval_small.png :exports both :width 1000 :height 250 :session *R* 

df$id <- seq.int(nrow(df))

ggplot(df, aes(x = start_, y = start_+duration, fill=info)) + 
     geom_rect(aes(xmin = start_, xmax = start_+duration, ymin = id, ymax = id + 1)) +
     #geom_vline(xintercept = 0, color = "red") +
     #geom_vline(xintercept = 4*1000000000, color = "red") +
     ylim(0, max(df$id+1)) +
     
     xlab("Time (milliseconds)") +
     ylab("Interval ID") + 
     theme_bw() +
     theme(
           legend.position = "none",
           text = element_text(size = 14),
           axis.title.y = element_text(vjust = 0.4), 
           strip.background = element_rect(colour = NA, fill = NA)
     )
#+end_src

#+RESULTS:
[[file:interval_small.png]]

** Analysis of C++ results
*** Read CSV

 #+begin_src R :results output :session *R* :exports both
df <- as.data.frame(read.csv('../data/final.csv', dec = '.', sep = ';'))

str(df)
 #+end_src

 #+RESULTS:
 #+begin_example

 'data.frame':	10 obs. of  9 variables:
  $ start   : int  3763 3766 3769 3791 3793 3801 3806 3810 3811 3814
  $ end     : int  3766 3769 3791 3793 3801 3806 3810 3811 3814 3816
  $ duration: int  3 3 22 2 8 5 4 1 3 2
  $ phases  : Factor w/ 7 levels "-1","0,1","0,1,2,3",..: 2 3 4 3 4 5 2 1 7 6
  $ nphases : int  2 4 5 4 5 3 2 0 2 1
  $ jobs    : Factor w/ 7 levels "-1","0","0,1",..: 2 3 5 3 4 6 2 1 7 7
  $ njobs   : int  1 2 4 2 3 2 1 0 1 1
  $ days    : int  1 1 1 1 1 1 1 NA 1 1
  $ ndays   : int  1 1 1 1 1 1 1 NA 1 1
 #+end_example

*** Plot intevals

 #+begin_src R :results output graphics :file saida_final.png :exports both :width 1000 :height 250 :session *R* 
pal <- c(   "gray",
            "#d5c76d",
            "#d5936d",
            "#6dafd5",
            "#d56d7b",
            "#6dd5c7",
            "#936dd5",
            "#d56daf",
            "#db818d",
            "#959fe0")

ggplot(df, aes(x = start, y = start+duration, fill = as.factor(phases))) + 
    geom_rect(aes(xmin = start, xmax = start + duration, ymin = 0, ymax = 1)) +
    geom_vline(xintercept = min(df$start), linetype = 'dashed', size = 0.5) +
    geom_vline(xintercept = max(df$end), linetype = 'dashed') +
    scale_fill_manual(
       "I/O phases",
        values = pal
    ) +
    xlab("Tempo de execução (ms)") +
    ylim(0, 1) +
    guides(fill = guide_legend(ncol = 3)) +
    theme_bw() +
    theme(
        legend.position = "top",
        text = element_text(size = 14),
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank()
    )
 #+end_src

 #+RESULTS:
 [[file:saida_final.png]]
* 03/01/2012 analysis
** read the raw data


#+begin_src R :results output :session *R* :exports both
df <- as.data.frame(read.csv('../data/intervals_3_1_2012.csv', dec = '.', sep = ';'))

epoch_time <- 1325376000
df$start  = df$start * 1
df$start_time = df$start_time - epoch_time
df$start_time = df$start_time * 1
# df$final_start_time = df$start_time + df$start

df$end  = df$end * 1
df$end_time = df$end_time - epoch_time
df$end_time = df$end_time * 1
# df$final_end_time = df$end_time + df$end



df$start_ = (df$start_time + df$start)# -epoch_time


df$duration <- df$end - df$start


df$end_ = df$start_ + df$duration #- epoch_time

str(df)
#+end_src

#+RESULTS:
#+begin_example

'data.frame':	24970 obs. of  9 variables:
 $ filename  : Factor w/ 12 levels "1171446687421322104.parsed.json",..: 1 1 2 2 3 3 3 3 3 3 ...
 $ start_time: num  257761 257761 258777 258777 252854 ...
 $ end_time  : num  258508 258508 262354 262354 258340 ...
 $ start     : num  2.391 696.56 2.767 3519.171 0.456 ...
 $ end       : num  49.86 747.45 37.21 3577.57 1.89 ...
 $ info      : Factor w/ 9 levels "mpi-io read independent shared file",..: 6 7 6 7 6 6 5 6 6 7 ...
 $ start_    : num  257763 258458 258780 262296 252854 ...
 $ duration  : num  47.47 50.89 34.44 58.4 1.44 ...
 $ end_      : num  257811 258508 258814 262355 252856 ...
#+end_example


*** how many jobs and phases

#+begin_src R :results output :session *R* :exports both
length(unique(df$filename))
length(unique(df$info))
#+end_src

#+RESULTS:
: [1] 12
: 
: [1] 9

#+begin_src R :results output :session *R* :exports both
unique(df$filename)
unique(df$info)
#+end_src

#+RESULTS:
#+begin_example
 [1] 1171446687421322104.parsed.json  12904608219343531331.parsed.json
 [3] 13008490376753310462.parsed.json 1438577549298145397.parsed.json 
 [5] 14820928848222412173.parsed.json 15916432724175057938.parsed.json
 [7] 15996770181791002276.parsed.json 17507710310223972247.parsed.json
 [9] 2590735410786465827.parsed.json  4108908151595003479.parsed.json 
[11] 6423491516011019214.parsed.json  8482904204649708891.parsed.json 
12 Levels: 1171446687421322104.parsed.json ... 8482904204649708891.parsed.json

[1] posix read unique file                        
[2] posix write consecutive sequential unique file
[3] posix read shared file                        
[4] posix write sequential unique file            
[5] posix write unique file                       
[6] posix read consecutive sequential unique file 
[7] posix read sequential unique file             
[8] mpi-io read independent shared file           
[9] mpi-io write shared file                      
9 Levels: mpi-io read independent shared file ... posix write unique file
#+end_example


*** Plot raw 

#+begin_src R :results output graphics :file intervals_3_1_2012_zoom.png :exports both :width 1000 :height 400 :session *R* 

df$id <- seq.int(nrow(df))

ggplot(df, aes(x = start_, y = start_+duration, fill=info)) + 
     geom_rect(aes(xmin = start_, xmax = start_+duration, ymin = id, ymax = id + 1)) +
     geom_vline(xintercept = 252500 , color = "red") +
     geom_vline(xintercept = 259000, color = "red") +
     ylim(0, 20) +
     xlim(252500, 259000) +
     xlab("Time (milliseconds)") +
     ylab("Interval ID") + 
     theme_bw() +
     theme(
           #legend.position = "none",
           text = element_text(size = 14),
           axis.title.y = element_text(vjust = 0.4), 
           strip.background = element_rect(colour = NA, fill = NA)
     )
#+end_src

#+RESULTS:
[[file:intervals_3_1_2012_zoom.png]]

** Analysis of C++ results
*** Read CSV

 #+begin_src R :results output :session *R* :exports both
df <- as.data.frame(read.csv('../data/final_3_1_2012.csv', dec = '.', sep = ';'))

str(df)
 #+end_src

 #+RESULTS:
 #+begin_example

 'data.frame':	878 obs. of  9 variables:
  $ start   : int  220152 220152 220153 220165 223076 223076 223100 226930 226930 226955 ...
  $ end     : int  220152 220153 220165 223076 223076 223100 226930 226930 226955 230406 ...
  $ duration: int  0 1 12 2911 0 24 3830 0 25 3451 ...
  $ phases  : Factor w/ 37 levels "-1","0","0,1",..: 30 1 36 1 28 37 1 28 37 1 ...
  $ nphases : int  1 0 1 0 3 1 0 3 1 0 ...
  $ jobs    : Factor w/ 24 levels "-1","0","0,2",..: 9 1 9 1 9 9 1 9 9 1 ...
  $ njobs   : int  1 0 1 0 1 1 0 1 1 0 ...
  $ days    : int  1 NA 1 NA 1 1 NA 1 1 NA ...
  $ ndays   : int  1 NA 1 NA 1 1 NA 1 1 NA ...
 #+end_example

*** Plot intervals

 #+begin_src R :results output graphics :file final_3_1_2012.png :exports both :width 1000 :height 250 :session *R* 
 pal <- c("white","#d5c76d", "#d5936d", "#6dafd5", "#d56d7b","#6dd5c7", "#936dd5",
"#d56daf", "#db818d", "#959fe0","#9E0142",
"#D53E4F","#F46D43", "#FDAE61", "#FEE08B", "#FFFFBF", "#E6F598",
"#ABDDA4", "#66C2A5", "#3288BD", "#5E4FA2","#8DD3C7", "#FFFFB3", "#BEBADA",
"#FB8072", "#80B1D3", "#FDB462", "#B3DE69","#FCCDE5","#D9D9D9", "#BC80BD", 
"#CCEBC5", "#FFED6F", "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",
"#FFFF33","#A65628", "#F781BF", "#999999", "#B3E2CD", "#FDCDAC", "#CBD5E8",
"#F4CAE4", "#E6F5C9", "#FFF2AE", "#F1E2CC",
"#CCCCC4")


df %>%
ggplot( aes(x = start, y = start+duration, fill = as.factor(phases))) + 
    geom_rect(aes(xmin = start, xmax = start + duration, ymin = 0, ymax = 1)) +
    geom_vline(xintercept = min(df$start), linetype = 'dashed', size = 0.5) +
    geom_vline(xintercept = max(df$end), linetype = 'dashed') +
    scale_fill_manual(
       "I/O phases", values = pal
    ) +
    xlab("Tempo de execução (ms)") +
    ylim(0, 1) +
   # xlim(220000, 23000) +
    #guides(fill = guide_legend(ncol = 3)) +
    theme_bw() +
    theme(
        legend.position = "top",
        text = element_text(size = 14),
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank()
    )
 #+end_src

 #+RESULTS:
 [[file:final_3_1_2012.png]]

*** Plot intevals zoom

 #+begin_src R :results output graphics :file final_3_1_2012_zoom.png :exports both :width 1000 :height 250 :session *R* 
 pal <- c("white","#d5c76d", "#d5936d", "#6dafd5", "#d56d7b","#6dd5c7", "#936dd5",
"#d56daf", "#db818d", "#959fe0","#9E0142",
"#D53E4F","#F46D43", "#FDAE61", "#FEE08B", "#FFFFBF", "#E6F598",
"#ABDDA4", "#66C2A5", "#3288BD", "#5E4FA2","#8DD3C7", "#FFFFB3", "#BEBADA",
"#FB8072", "#80B1D3", "#FDB462", "#B3DE69","#FCCDE5","#D9D9D9", "#BC80BD", 
"#CCEBC5", "#FFED6F", "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",
"#FFFF33","#A65628", "#F781BF", "#999999", "#B3E2CD", "#FDCDAC", "#CBD5E8",
"#F4CAE4", "#E6F5C9", "#FFF2AE", "#F1E2CC",
"#CCCCC4")


df %>% filter(end < 259000) %>%
ggplot( aes(x = start, y = start+duration, fill = as.factor(phases))) + 
    geom_rect(aes(xmin = start, xmax = start + duration, ymin = 0, ymax = 1)) +
   # geom_vline(xintercept = min(df$start), linetype = 'dashed', size = 0.5) +
    #geom_vline(xintercept = max(df$end), linetype = 'dashed') +
    scale_fill_manual(
       "I/O phases", values = pal
    ) +
    xlab("Tempo de execução (ms)") +
    ylim(0, 1) +
    xlim(252500, 259000) +
    #guides(fill = guide_legend(ncol = 3)) +
    theme_bw() +
    theme(
        legend.position = "top",
        text = element_text(size = 14),
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank()
    )
 #+end_src

 #+RESULTS:
 [[file:final_3_1_2012_zoom.png]]

*** how many unique phases

#+begin_src R :results output :session *R* :exports both
unique(df$phases)
#+end_src

#+RESULTS:
:  [1] 2           -1          7           1,4,8       8           1,4        
:  [7] 0,1,2,4     2,4         0,1,2       0           0,2         1,2        
: [13] 1,2,5       1,2,3,5     0,1,2,3,5   0,1         1           0,3,4      
: [19] 3           1,5         0,1,5       1,4,5       1,3,5       0,3        
: [25] 0,1,3,4,6   0,1,3       0,3,6       0,3,5,6     0,1,3,6     0,1,3,5,6  
: [31] 0,1,3,4,5,6 0,1,3,4     0,3,4,5,6   0,3,4,6     4           3,4,6      
: [37] 3,4        
: 37 Levels: -1 0 0,1 0,1,2 0,1,2,3,5 0,1,2,4 0,1,3 0,1,3,4 ... 8

*** how many unique jobs

#+begin_src R :results output :session *R* :exports both
unique(df$jobs)
#+end_src

#+RESULTS:
:  [1] 11    -1    9     2,9   2     2,10  2,6   2,3   2,5   2,11  6     5    
: [13] 5,9   0,2   0     7     1     1,8   1,4,8 1,4   4     10    4,7   8    
: 24 Levels: -1 0 0,2 1 1,4 1,4,8 1,8 10 11 2 2,10 2,11 2,3 2,5 2,6 2,9 4 ... 9


*** Plot number of jobs during the day

#+begin_src R :results output graphics :file final_3_1_2012_njobs.png  :exports both :width 1000 :height 250 :session *R* 
plot_jobs <- ggplot(df, aes(x=start, y=njobs)) +
    geom_line(size=0.2) +
     geom_vline(xintercept = min(df$start), linetype = 'solid') +
     geom_vline(xintercept = max(df$end), linetype = 'solid') 
 
plot_jobs
#+end_src

#+RESULTS:
[[file:final_3_1_2012_njobs.png]]

*** Plot number of phases during the day

#+begin_src R :results output graphics :file final_3_1_2012_nphases.png :exports both :width 1000 :height 250 :session *R* 
plot_jobs <- ggplot(df, aes(x=start, y=nphases)) +
    geom_line(size=0.2) +
     geom_vline(xintercept = min(df$start), linetype = 'solid') +
     geom_vline(xintercept = max(df$end), linetype = 'solid') 
 
plot_jobs
#+end_src

#+RESULTS:
[[file:final_3_1_2012_nphases.png]]

*** Summary of number of jobs

#+begin_src R :results output :session *R* :exports both
df$njobs %>% summary()
#+end_src

#+RESULTS:
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:  0.0000  0.0000  1.0000  0.7494  1.0000  3.0000

*** Summary of number of phases

#+begin_src R :results output :session *R* :exports both
df$nphases %>% summary()
#+end_src

#+RESULTS:
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:   0.000   0.000   1.000   1.036   1.000   6.000

*** Summary of duration

#+begin_src R :results output :session *R* :exports both
df$duration %>%  summary()
#+end_src

#+RESULTS:
:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
:     0.0     0.0     1.0   116.3     1.0  6916.0
 
*** Histogram of duration

#+begin_src R :results output graphics :file final_3_1_2012_hist_duration.png :exports both :width 600 :height 400 :session *R* 
hist(log(df$duration))
#+end_src

#+RESULTS:
[[file:final_3_1_2012_hist_duration.png]]

